/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Input Method Manager
 #	author : miyako
 #	2016/06/28
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Imm Context

		case 1 :
			IM_Associate(pResult, pParams);
			break;

		case 2 :
			IM_Disassociate(pResult, pParams);
			break;

// --- Imm Status

		case 3 :
			IM_Get_mode(pResult, pParams);
			break;

		case 4 :
			IM_Set_mode(pResult, pParams);
			break;

	}
}

// ---------------------------------- Imm Context ---------------------------------

void IM_Associate(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
	C_LONGINT returnValue;
	
	HWND hwnd = GetFocus();
	
	if(hwnd)
		returnValue.setIntValue(ImmAssociateContextEx(hwnd, NULL, IACE_DEFAULT));
	
	returnValue.setReturn(pResult);
#endif	
}

void IM_Disassociate(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
	C_LONGINT returnValue;
	
	HWND hwnd = GetFocus();
	
	if(hwnd)
		returnValue.setIntValue(ImmAssociateContextEx(hwnd, NULL, 0));
	
	returnValue.setReturn(pResult);
#endif
}

// ---------------------------------- Imm Status ----------------------------------


void IM_Get_mode(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	HWND hwnd = GetForegroundWindow();
	
	if(hwnd)
	{
		DWORD conversion, sentence;
		
		HIMC himc = ImmGetContext(hwnd);
		returnValue.setIntValue(ImmGetConversionStatus(himc, (LPDWORD)&conversion, (LPDWORD)&sentence));
		
		if(!ImmGetOpenStatus(himc))
			conversion = -1;
		
		Param1.setIntValue(conversion);
		Param2.setIntValue(sentence);
		Param1.toParamAtIndex(pParams, 1);
		Param2.toParamAtIndex(pParams, 2);
		ImmReleaseContext(hwnd, himc);
	}
	
	returnValue.setReturn(pResult);
#endif
}

void IM_Set_mode(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONWIN
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	HWND hwnd = GetForegroundWindow();
	
	if(hwnd)
	{
		HIMC himc = ImmGetContext(hwnd);
		
		DWORD conversion = Param1.getIntValue();
		DWORD sentence = Param2.getIntValue();
		
		if(conversion == -1)
		{
			if(ImmGetConversionStatus(himc, (LPDWORD)&conversion, NULL))
				ImmSetConversionStatus(himc, conversion, sentence);
			
			ImmSetOpenStatus(himc, FALSE);
		}else{
			ImmSetOpenStatus(himc, TRUE);
			returnValue.setIntValue(ImmSetConversionStatus(himc, conversion, sentence));
		}
		
		ImmReleaseContext(hwnd, himc);
	}
	
	returnValue.setReturn(pResult);
#endif
}
